Image credit:

https://unsplash.com/photos/man-sitting-on-bench-reading-newspaper-_Zua2hyvTBk?utm_content=creditShareLink&utm_medium=referral&utm_source=unsplash
https://unsplash.com/photos/man-sitting-on-bench-reading-newspaper-_Zua2hyvTBk?utm_content=creditShareLink&utm_medium=referral&utm_source=unsplash  
https://unsplash.com/photos/black-iphone-4-with-red-and-white-flag-qXfD_nG4j-U
https://unsplash.com/photos/brown-acoustic-guitar-on-brown-rock-near-green-trees-during-daytime-Z6GIaeEqgOQ
https://unsplash.com/photos/brown-acoustic-guitar-on-brown-rock-near-green-trees-during-daytime-Z6GIaeEqgOQ
https://unsplash.com/photos/cars-on-road-near-catherdral-fUOMWdwuuvw
https://unsplash.com/photos/train-on-rail-track-during-daytime-80iU8ECOXEc

colorlib login page
https://colorlib.com/wp/template/login-form-v16/

CMS Blog Tutorial
1. Install Laravel and auth
	- composer create-project laravel/laravel cms99 "8.6.3"
	- composer require laravel/ui 
	- php artisan ui bootstrap --auth
2. create custom controllers
	php artisan make:controller CustomController -r
3. convert html template to blade template
	- use asset() function for css and scripts
	- paste your assets in public folder
	- create blogController 
	- use show, index functions of blog
	- create contactController
	- use index function
	- create parent and child page using extents
4. why we need names route
5. make link active according to page opened
	- Request::routeIs('ROUTE_NAME') ? "active" : ""
6. migrate the users table
	- php artisan migrate
7. use  to check the list of route
	- php artisan route:list
8. show sidebar in login, register and dashboard page
9. use @guest & @auth
10. create_posts_table migration
	php artisan make:migration create_posts_table
   		  $table->id();
            $table->string('title');
            $table->string('slug');
            $table->foreignId('user_id')->references('id')->on('users')->onDelete('cascade');
            $table->string('imagePath');
            $table->text('body'); 
            $table->text('updated_at'); 
            $table->text('created_at'); 
	php artisan migrate:rollback 
	php artisan migrate
11. "Create blog" page with form
12. install ckeditor in html form	
	- https://ckeditor.com/docs/ckeditor5/latest/installation/getting-started/quick-start.html
	- Load style/script only on particular page
13. Store the data with form
	- use dd() on request
	- Validating form input
	- display error message
		@error('title')
		{{-- The $attributeValue field is/must be $validationRule --}}
		<p style="color: red; margin-bottom:25px;">{{ $message }}</p>
		@enderror
		value="{{ old('title') }}"
	    "name"=> 'required|string|min:3|max:40', 
            "image"=>'required|image'
	- Customize the error message
14. Get user input with $request
	use Illuminate\Support\Facades\Auth;
	use Illuminate\Support\str;
       $title = $request->input('title');
       $slug = str::slug($title,'-');
       $userID = Auth::user()->id; 
       $body = $request->input('body');
15. Store image in filesystem and save file name in database	 
	$request->file('image')->store("blog/images/",'public')
	php artisan storage:link
	return 'storage/'.$request->file('image')->store("blog/images/",'public')
16. create post model to store file inputs
	use App\Models\Post;
	php artisan make:model Post
	$post = new Post()
	$post->title = xxxxx
	$post->save()
	redirect()->back()
17. Show success message after data inserted
	redirect()->back()->with('status','Saved successfully')
	@if(Session('status')) Session('status')   @endif
18. display the stored value in html page with eloquent relationship
	public function user(){  return $this->belongsTo(User::class) }
	public function posts(){  return $this->hasMany(Post::class) }
19. Fetch data with post model in controller
	$posts = Post::all()
	view('xxxx',compact('postss'))
20. use foreach to display in blade
	- user->nme
	- created_at->diffForHumans()	
21. dedicated blog page pass "post" in route method
	- route("xxxx", $post) 
	- xxx/{post} | xxx/{post:slug} -- in controller
 	- query in model with slug
	- Post::where('slug',$slug)->first()
	- view('xxxx',compact('yyyy'))
22. all post in index page
	- Post::latest()->take(4)->get()
23. create unique slug by adding previous postid
 	-postid = Post::latest()->take(1)->first()->id + 1
24. create middle for blog controller
	Session::flash('error', 'Need to login Access'); 
	->middleware('auth') -- on controller 
	public function __construct(){ $this->middleware('auth') }
	public function __construct(){ $this->middleware('auth')->except('index') }
25. show edit and delete button to loggedin user and author of post
	- auth()->check() && auth()->user()->id !== $posts->user->id
26. Create route, function, page  of Edit
	- Populate the input data @method('')
	- validate and save
	- change postID slug
	- auth()->check() && auth()->user()->id !== $posts->user->id on edit and update
	- abort(403)
27. Delete a post
	- Create function, nameofroute, @method('delete')
	- Custom messgae on Blog homepage 
28. Make search work and if no post found show error
	- Post::where('title','like',"%".xxxxx."%")
	->orwhere('title','like',"%".xxxxx."%")->latest()->get()
	- @forelse and @empty
29. Show all my post in blog index page
30. Add pagination
	- ::latest()->paginate(4)
	- $posts->links()
	- vendor/laravel/src-illuminate/pagination/resources
	- php artisan vendor:publish --tag=laravel-pagination
	- {{$allPosts->links('pagination::default')}}
31. create category controller
32. create migration table 
	- php artisan make:migration create_categories_table
	- $table->string('name')->unique();
	- php artisan migrate
33. create category controller
34. Create category page categories.create_category
	- php artisan make:controller categoryController -r
35. store the values into database
	- required|unique:categories,name
36. create category.index page, add datatable
37. create edit and delete category
38. display all category in front end
39. create common file in include folder for flash messages
40. attaching category id to post
	$table->foreignId('user_id')->references('id')->on('users')->onDelete('cascade');
	- php artisan migrate:fresh
41. try validation on dropdown category
41. create eloquent relationship between post and category
	-category hasMany posts
	-posts belongsTo category
42. filter the category in blog index page
	- route('blog.index', ['category'=>'name'])
	-  $allPosts = Category::where('name', $request->category)->firstOrFail()->posts()->paginate(2)->withQueryString();
43. show related category post at bottom of each post
        $singlePost = Post::where('slug', $slug)->first();
        $category = $singlePost->category;   
        $relatedPosts = $category->posts()->where('id','!=',$singlePost->id)->latest()->take(2)->get(); 


category_id


--- whats unique
1. Login system
2. CRUD Blog post (multi user)	
	- Image
	- time Created
	- show latestppost on home and blog
	- Edit and delete
	- search and pagination
3. category Creation and filter
4. relaed category on botto of each post

 
@extends('layouts.index')

     
     @section('main')
     
     
@endsection